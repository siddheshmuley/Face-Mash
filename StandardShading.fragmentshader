#version 330 core

// Interpolated values from the vertex shaders
in vec4 vs_vertexColor;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec3 LightD2;
in vec3 plit;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform vec3 LightP2;

void main(){

	// Light emission properties
	// You probably want to put them as uniforms
	vec3 LightColor1 = vec3(1,1,1);
	vec3 LightColor2 = vec3(1,1,1);
	float LightPower = 250.0f;
	
	// Material properties
	vec3 MaterialDiffuseColor = vs_vertexColor.rgb;
	vec3 MaterialAmbientColor = plit * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;

	// Distance to the light
	float distance = length( LightPosition_worldspace - Position_worldspace );
	float d2 = length( LightP2 - Position_worldspace );

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	vec3 m = normalize( LightD2 );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	float cosTheta2 = clamp( dot( n,m ), 0,1 );

	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	vec3 T = reflect(-m,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	float cosAlpha2 = clamp( dot(E,T),0,1);
	//color = vs_vertexColor.rgb;
	
	color = 
		// Ambient : simulates indirect lighting
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		MaterialDiffuseColor * LightColor1 * LightPower * cosTheta / (distance*distance) +
		MaterialDiffuseColor * LightColor2 * LightPower * cosTheta2 / (d2*d2) +
		// Specular : reflective highlight, like a mirror
		MaterialSpecularColor * LightColor1 * LightPower * pow(cosAlpha,5) / (distance*distance) +
		MaterialSpecularColor * LightColor2 * LightPower * pow(cosAlpha2,5) / (d2*d2);
	
}